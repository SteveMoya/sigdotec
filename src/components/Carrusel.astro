<script>
  // @ts-ignore
  // TODO: a11yDialog types
  import A11yDialog from 'https://cdn.jsdelivr.net/npm/a11y-dialog@^7.5.2/dist/a11y-dialog.esm.js'

  const carouselTargetList = document.getElementById('carouselTargetList')

  carouselTargetList?.addEventListener('click', handleOpen)
  carouselTargetList?.addEventListener('keydown', handleOpen)

  class Carousel {
    dialog: any | null = null
    carouselElem: HTMLElement | null = null
    slidesUl: HTMLUListElement | null = null
    prevLink: HTMLAnchorElement | null = null
    nextLink: HTMLAnchorElement | null = null
    closeButton: HTMLButtonElement | null = null
    currentIdx: number = 0
    isOpen: boolean = false

    _keydownHandler = (e: KeyboardEvent) => {}
    _goToPrevHandler = (e: MouseEvent) => {}
    _goToNextHandler = (e: MouseEvent) => {}
    _closeHandler = (e: MouseEvent) => {}
    _updateSlideHandler = (e: any) => {}

    constructor(carouselElem: HTMLElement | null) {
      if (carouselElem == null) return
      const slides = carouselElem.querySelector<HTMLUListElement>('#slides')
      const prevLink =
        carouselElem.querySelector<HTMLAnchorElement>('#prevLink')
      const nextLink =
        carouselElem.querySelector<HTMLAnchorElement>('#nextLink')
      const closeButton =
        carouselElem.querySelector<HTMLButtonElement>('#closeButton')

      if (
        slides == null ||
        prevLink == null ||
        nextLink == null ||
        closeButton == null
      )
        return

      this.dialog = new A11yDialog(document.getElementById('carousel-dialog'))
      this.carouselElem = carouselElem
      this.slidesUl = slides
      this.prevLink = prevLink
      this.nextLink = nextLink
      this.closeButton = closeButton

      const { currentIndex, isOpen } = this._getCarouselState()
      this.currentIdx = currentIndex
      this.isOpen = isOpen

      this.slidesUl.children[this.currentIdx]?.classList.add(
        'carousel__slide--visible'
      )

      this._changeCurrentSlide(this.currentIdx, currentIndex)

      if (this.isOpen) {
        this.open(this.currentIdx)
      }
    }

    open(index: number | undefined = undefined) {
      document.documentElement.style.overflow = 'hidden'
      this.carouselElem!.classList.add('carousel--active')
      this.isOpen = true
      this._addEvents()
      this._updateCarouselUrl(index)
      this.dialog.show()
    }

    close() {
      document.documentElement.style.overflow = 'auto'
      this.carouselElem!.classList.remove('carousel--active')
      this.isOpen = false
      this._updateCarouselUrl()
      this._removeEvents()
      this.dialog.hide()
    }

    _changeCurrentSlide(oldIdx: number, newIdx: number) {
      if (newIdx > this.slidesUl!.childElementCount) {
        this.close()
        return
      }

      _loadImage(
        this.slidesUl!.children[newIdx]?.firstElementChild as HTMLImageElement
      )

      if (newIdx < this.slidesUl!.children.length - 1 && oldIdx < newIdx) {
        _loadImage(
          this.slidesUl!.children[newIdx + 1]
            ?.firstElementChild as HTMLImageElement
        )
      } else {
        _loadImage(
          this.slidesUl!.children[newIdx - 1]
            ?.firstElementChild as HTMLImageElement
        )
      }

      this.slidesUl!.children[newIdx].classList.add('carousel__slide--visible')

      if (newIdx !== oldIdx) {
        this.slidesUl!.children[oldIdx].classList.remove(
          'carousel__slide--visible'
        )
      }

      this.currentIdx = newIdx

      this.prevLink!.href = _getPrevLink(
        this.currentIdx,
        this.slidesUl!.childElementCount
      )
      this.nextLink!.href = _getNextLink(
        this.currentIdx,
        this.slidesUl!.childElementCount
      )
    }

    _addEvents() {
      this._keydownHandler = this._handleKeydown.bind(this)
      this._goToPrevHandler = this._handleGoToPrev.bind(this)
      this._goToNextHandler = this._handleGoToNext.bind(this)
      this._closeHandler = this._handleClose.bind(this)
      this._updateSlideHandler = this._handleUpdateSlide.bind(this)

      this.dialog.on('hide', this._closeHandler)

      this.prevLink!.addEventListener('click', this._goToPrevHandler)
      this.nextLink!.addEventListener('click', this._goToNextHandler)
      this.closeButton!.addEventListener('click', this._closeHandler)

      document.addEventListener('keydown', this._keydownHandler)

      window.addEventListener('popstate', this._updateSlideHandler)
    }

    _removeEvents() {
      this.prevLink!.removeEventListener('click', this._goToPrevHandler)
      this.nextLink!.removeEventListener('click', this._goToNextHandler)
      this.closeButton!.removeEventListener('click', this._closeHandler)

      document.removeEventListener('keydown', this._keydownHandler)

      window.removeEventListener('popstate', this._updateSlideHandler)

      this.dialog.off('hide', this._closeHandler)
    }

    _handleKeydown(this: Carousel, e: KeyboardEvent) {
      if (e.key == 'ArrowLeft') {
        this._handleGoToPrev(e)
      }
      if (e.key == 'ArrowRight') {
        this._handleGoToNext(e)
      }
      if (e.key == 'Escape') {
        this._handleClose(e)
      }
    }

    _handleGoToPrev(this: Carousel, e: MouseEvent | KeyboardEvent) {
      e.preventDefault()
      const index = _getPrevIndex(
        this.currentIdx,
        this.slidesUl?.childElementCount ?? 0
      )
      this._updateCarouselUrl(index)
    }

    _handleGoToNext(this: Carousel, e: MouseEvent | KeyboardEvent) {
      e.preventDefault()
      const index = _getNextIndex(
        this.currentIdx,
        this.slidesUl?.childElementCount ?? 0
      )
      this._updateCarouselUrl(index)
    }

    _handleClose(this: Carousel, e: MouseEvent | KeyboardEvent) {
      this.close()
    }

    _handleUpdateSlide(this: Carousel, e: any) {
      const { currentIndex, isOpen } = this._getCarouselState()
      if (isOpen) {
        this._changeCurrentSlide(this.currentIdx, currentIndex)
      }
    }

    _getCarouselState() {
      const urlSearchParams = new URLSearchParams(window.location.search)
      const params = Object.fromEntries(urlSearchParams.entries())
      const currentIndex = Number(params.image ?? 0)
      const isOpen = Boolean(params.image)
      return { currentIndex, isOpen }
    }

    _updateCarouselUrl(value: number | undefined = undefined) {
      const url = new URL(window.location.href)
      if (value == null) {
        url.searchParams.delete('image')
      } else {
        url.searchParams.set('image', String(value))
      }
      window.history.pushState({}, '', url)

      // To be able to listen to popstate events window.addEventListener('popstate')
      const popStateEvent = new PopStateEvent('popstate', {})
      dispatchEvent(popStateEvent)
    }
  }

  const carouselElement = document.getElementById('carousel')
  const carousel = new Carousel(carouselElement)

  function handleOpen(e: MouseEvent | KeyboardEvent) {
    if (e.target instanceof HTMLElement && e.target.dataset.carouselIndex) {
      if (e instanceof KeyboardEvent && e.key !== 'Enter') {
        return
      }

      e.preventDefault()
      const imgIndex = Number(e.target.dataset.carouselIndex)
      carousel.open(imgIndex)
    }
  }

  //UTILITY
  function _loadImage(img: HTMLImageElement | null) {
    if (img && (!img.src || img.src.includes('placeholder'))) {
      img.src = img.dataset.src ?? ''
    }
  }

  function _getPrevLink(currentIndex: number, totalItems: number) {
    const index = _getPrevIndex(currentIndex, totalItems)
    return window.location.href.replace(/\?image=*/, `?image=${index}`)
  }

  function _getNextLink(currentIndex: number, totalItems: number) {
    const index = _getNextIndex(currentIndex, totalItems)
    return window.location.href.replace(/\?image=*/, `?image=${index}`)
  }

  function _getPrevIndex(currentIndex: number, totalItems: number) {
    let index = currentIndex
    if (currentIndex - 1 < 0) {
      index = totalItems - 1
    } else {
      index = currentIndex - 1
    }
    return index
  }

  function _getNextIndex(currentIndex: number, totalItems: number) {
    let index = currentIndex
    if (currentIndex + 1 > totalItems - 1) {
      index = 0
    } else {
      index = currentIndex + 1
    }
    return index
  }
</script>

<div id='carousel-dialog' aria-hidden='true' class='carousel'>
  <div class='carousel__overlay' data-a11y-dialog-hide></div>
  <div id='carousel' role='document'>
    <button
      type='button'
      id='closeButton'
      class='carousel__button carousel__close'
      aria-label='Close carousel'
    >
      <svg
        class='carousel__svg'
        xmlns='http://www.w3.org/2000/svg'
        fill='none'
        viewBox='0 0 24 24'
        stroke-width='1.5'
        stroke='currentColor'
      >
        <path
          stroke-linecap='round'
          stroke-linejoin='round'
          d='M6 18L18 6M6 6l12 12'></path>
      </svg>
    </button>
    <div id='carousel__wrapper' class='carousel__wrapper'>
      <div class='carousel__main'>
        <!-- Prev Link -->
        <a
          class='carousel__button'
          aria-label='Go to previous photo'
          id='prevLink'
        >
          <svg
            class='carousel__svg'
            id='prev'
            fill='none'
            stroke='currentColor'
            viewBox='0 0 24 24'
          >
            <path
              stroke-linecap='round'
              stroke-linejoin='round'
              stroke-width='2'
              d='M15 19l-7-7 7-7'></path>
          </svg>
        </a>

        <!-- Slides -->
        <slot />

        <!-- Next Link -->
        <a
          class='carousel__button carousel__button--right'
          aria-label='Go to next photo'
          id='nextLink'
        >
          <svg
            class='carousel__svg'
            id='next'
            fill='none'
            stroke='currentColor'
            viewBox='0 0 24 24'
          >
            <path
              stroke-linecap='round'
              stroke-linejoin='round'
              stroke-width='2'
              d='M9 5l7 7-7 7'></path>
          </svg>
        </a>
      </div>
    </div>
  </div>
</div>
