---
import { createVerificationToken } from "@/lib/auth/lucia";

import Layout from "@layouts/Layout.astro";
import DemographyForm from "@/components/DemographyForm";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { db, eq, Demography } from "astro:db";
import { Toaster } from "sonner";

const user = Astro.locals.user;
if (!user) {
  return Astro.redirect("/login", 302);
}
if (Astro.locals.demography) {
  return Astro.redirect("/app/", 302);
}
try {
  if (Astro.request.method === "POST") {
    const body = await Astro.request.json();
    const { birthdate, province, workingPlace, subject, gender } = body;
    if (!birthdate || !province || !workingPlace || !subject || !gender) {
      return new Response("Faltan campos por completar", { status: 400 });
    }
    const existingDemography = (
      await db.select().from(Demography).where(eq(Demography.id, user.id))
    ).at(0);
    if (existingDemography) {
      return Astro.redirect("/app/", 302);
    }
    
    try {
      await db.insert(Demography).values([
        {
          id: String(user.id),
          userId: String(user.id),
          birthdate: new Date(birthdate),
          province: String(province),
          workingPlace: String(workingPlace),
          subject: String(subject),
          gender: String(gender),
        },
      ]);
      Astro.locals.demography = {
        userId: user.id,
        birthdate: new Date(birthdate),
        province,
        workingPlace,
        subject,
        gender,
      };
      console.log("Demografía guardada correctamente", Astro.locals.demography);
      return Astro.redirect("/app/", 302);
    } catch (error) {
      console.log(error);
      return new Response("Error al enviar tu email de Verificación", {
        status: 400,
      });
    }
  }

  // Renderiza la página de verificación de correo electrónico aquí
} catch (error) {
  console.error(error);
  return new Response("Error interno del servidor", { status: 500 });
}
---

<Layout>
  <div class="flex justify-center content-center my-[6dvh]">
    <Card className="w-full max-w-2xl">
      <CardHeader>
        <CardTitle>Datos Demográficos</CardTitle>
        <CardDescription>
          Completa la información sobre tu perfil docente.
        </CardDescription>
      </CardHeader>
      <DemographyForm client:load />
    </Card>
  </div>
  <Toaster
    richColors
    closeButton
    toastOptions={{
      classNames: {
        success: "bg-success-600",
        error: "bg-danger-600",
        loading: "bg-secondary-200",
      },
    }}
    client:only
  />
</Layout>
